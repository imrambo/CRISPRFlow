#!/usr/bin/python3
"""
Motivation: extract, dereplicate, cluster, and align sequences for trees.
Author: Ian Rambo
Input: query fasta, reference fasta
Have the sequence pulling in another module
"""
import os
import atexit
import logging
#------------------------------------------------------------------------------
def REMOVE_BUILD(source):
    """
    Remove intermediate build targets within a specified temporary directory.
    """
    if os.path.exists(source) and os.listdir(source):
        print('removing intermediate build targets in %s' % os.path.abspath(source))
        for tmp in [os.path.join(source, os.path.basename(str(t))) for t in BUILD_TARGETS]:
            if os.path.isfile(tmp):
                print('removing %s' % tmp)
                os.remove(tmp)
            else:
                pass

        if not os.listdir(source):
            print('removing empty directory: "%s"' % source)
            os.rmdir(source)
        else:
            print('directory "%s" is not empty' % source)
    else:
        print('Cannot delete directory "%s", does not exist' % tmpdir)
        pass
    return None
#------------------------------------------------------------------------------
AddOption('--gff', dest='gff', type='string', nargs=1,
action='store', help='gff file')
AddOption('--seqfile', dest='seqfile', type='string', nargs=1,
action='store', help='input fasta or fastq file')
AddOption('--outdir', dest = 'outdir', type = 'string', nargs = 1,
action = 'store', help = 'path to output directory')
AddOption('--minlen', dest = 'minlen', type = 'int', nargs = 1,
action = 'store', help = 'minimum sequence length')
AddOption('--maxlen', dest = 'maxlen', type = 'int', nargs = 1,
action = 'store', help = 'maximum sequence length')
AddOption('--accessions', dest = 'accessions', type = 'string',
nargs = 1, action = 'store', help = 'gene accessions to target')
AddOption('--dmnd_thread', dest = 'dmnd_thread', type = 'int',
nargs = 1, default = 1, action = 'store', help = 'number of CPUs for DIAMOND')
AddOption('--dmnd_method', dest = 'dmnd_method', type = 'string',
nargs = 1, action = 'store', default = 'blastp', help = 'method for DIAMOND')
AddOption('--dmnd_db', dest = 'dmnd_db', type = 'string',
nargs = 1, action = 'store', help = 'path to DIAMOND database')
AddOption('--prefix', dest = 'prefix', type = 'string',
nargs = 1, action = 'store', help = 'run prefix ID - output file names will start with this')
AddOption('--pctid', dest = 'pctid', type = 'float',
nargs = 1, action = 'store', help = 'percent ID for USEARCH clustering')
AddOption('--rm_build', dest = 'rmbuild', action='store_true', help = 'only keep the build targets in the --outdir. Will remove build targets in the temporary build within SConstruct directory.')
#==============================================================================
#Initialize environment
env = Environment(MINLEN=GetOption('minlen'),
                          GFF=GetOption('gff'),
                          OUTDIR=GetOption('outdir'),
                          MAXLEN=GetOption('maxlen'),
                          SEQFILE=GetOption('seqfile'),
                          TARGETACC=GetOption('accessions'),
                          DMNDTHREAD=GetOption('dmnd_thread'),
                          DMNDMETHOD=GetOption('dmnd_method'),
                          DMNDDB=GetOption('dmnd_db'),
                          PREFIX=GetOption('prefix'),
                          PCTID=GetOption('pctid'))
if env['PREFIX']:
    build_tmp = env['PREFIX'] + '_build'
    SConscript(['SConscript'], exports='env', variant_dir=build_tmp, duplicate=0)
#------------------------------------------------------------------------------
#Remove the build targets in the temporary directory
if GetOption('rmbuild'):
    atexit.register(REMOVE_BUILD(build_tmp))

else:
    pass

Export('env')
